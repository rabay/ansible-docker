---
# tasks file for docker-stack

- block:

  - name: start cntlm
    systemd:
      name: cntlm
      state: started
    changed_when: false
    when: enableproxy

  - name: Create a network for application
    docker_network:
      docker_host: "{{ dkr_host }}"
      tls: "{{ dkr_tls }}"
      name: app_nw
      state: present
      driver_options:
        com.docker.network.bridge.host_binding_ipv4: "{{ dkr_host_binding_ipv4 }}"
        com.docker.network.bridge.enable_icc: true
      ipam_options:
        subnet: '172.20.0.0/16'
        gateway: '172.20.0.1'
    register: app_nw

  - name: Create a network for database
    docker_network:
      docker_host: "{{ dkr_host }}"
      tls: "{{ dkr_tls }}"
      name: db_nw
      state: present
      driver_options:
        com.docker.network.bridge.host_binding_ipv4: "{{ dkr_host_binding_ipv4 }}"
        com.docker.network.bridge.enable_icc: true
      ipam_options:
        subnet: '172.30.0.0/16'
        gateway: '172.30.0.1'
    register: db_nw

  - name: create db and app directories
    file:
      path: "{{ item }}"
      state: directory
      mode: "u=rwx,g=rwx,o=rwx"
      owner: "1000"
      group: "1000"
    with_items:
      - /opt/mariadb/conf
      - /opt/mariadb/conf.d
      - /opt/mariadb/data
      - /opt/mariadb/logs
      - /opt/mariadb/dumps
      - /opt/limesurvey/conf
      - /opt/limesurvey/upload
      - /opt/portainer/data

  - name: create portainer container for environment monitoring
    docker_container:
      docker_host: "{{ dkr_host }}"
      state: started
      name: portainer
      image: portainer/portainer
      ignore_image: "{{ dkr_ignore_image }}"
      hostname: portainer
      restart_policy: always
      recreate: yes
      command: "-H unix:///var/run/docker.sock"
      ports:
        - "0.0.0.0:9000:9000"
      exposed_ports:
        - "9000"
      volumes:
        - "/var/run/docker.sock:/var/run/docker.sock"
        - "/opt/portainer/data:/data"
      labels:
        traefik.enable: "true"
        traefik.frontend.rule: "Host:portainer.scopus.com.br"
        traefik.port: "9000"
        traefik.protocol: "http"
        traefik.backend: "portainer"
        traefik.docker.network: "bridge"

  - name: create container of smtp relay service
    docker_container:
      docker_host: "{{ dkr_host }}"
      state: started
      name: smtprelay
      image: turgon37/smtp-relay
      ignore_image: "{{ dkr_ignore_image }}"
      hostname: smtprelay
      restart_policy: always
      user: "{{ msql_exec_user }}"
      networks:
        - name: "app_nw"
      ports:
        - "0.0.0.0:25:25"
      env:
        RELAY_POSTMASTER: "arquitetura-servicos@scopus.com.br"
        RELAY_MYHOSTNAME: "smtprelay"
        RELAY_MYDOMAIN: "scopus.com.br"
        RELAY_MYNETWORKS: "127.0.0.0/8 172.10.0.0/16 172.20.0.0/16 172.30.0.0/16 192.168.0.0/16"
        RELAY_HOST: "[172.16.43.116]:25"
        RELAY_DOMAINS: "scopus.com.br bradesco.com.br"
        RELAY_USE_TLS: "no"
        RELAY_MODE: "STRICT"
    register: smtp_container

  - name: create the my.cnf file for mariadb
    template:
      src: mysql_my.cnf.j2
      dest: /opt/mariadb/conf/my.cnf
      mode: 0666
      backup: no
      force: yes

  - name: Create db container and connect to network
    docker_container:
      docker_host: "{{ dkr_host }}"
      state: started
      name: mariadb
      image: "yobasystems/alpine-mariadb:latest"
      ignore_image: "{{ dkr_ignore_image }}"
      hostname: mariadb
      restart_policy: always
      user: "{{ msql_exec_user }}"
      command: "--character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci"
      networks:
        - name: "db_nw"
      etc_hosts:
        dockerhost: "{{ db_nw.ansible_facts.docker_network.IPAM.Config[0].Gateway }}"
      ports:
        - "0.0.0.0:{{ msql_port }}:{{ msql_port }}"
      volumes:
        - "/opt/mariadb/conf/my.cnf:/etc/mysql/my.cnf:rw"
        - "/opt/mariadb/conf.d:/etc/mysql/conf.d:rw"
        - "/opt/mariadb/data:/var/lib/mysql:rw"
        - "/opt/mariadb/dumps:/tmp/dumps:rw"
        - "/opt/mariadb/logs:/var/lib/mysql/mysql-bin:rw"
      env:
        MYSQL_ROOT_PASSWORD: "{{ msql_root_passwd }}"
        MYSQL_DATABASE: "{{ msql_db }}"
        MYSQL_USER: "{{ msql_user }}"
        MYSQL_PASSWORD: "{{ msql_passwd }}"
        MYSQL_ROOT_HOST: "{{ msql_root_host }}"
        MYSQL_LOG_CONSOLE: "{{ msql_log_console }}"
    register: db_container

  - name: copy dump file to docker host 
    copy:
      src: "files/{{ msql_dumpfile }}"
      dest: /opt/mariadb/dumps
      mode: 0666

  - name: wait db container starts before restore de dump
    wait_for:
      host: "{{ db_container.ansible_facts.docker_container.NetworkSettings.IPAddress }}"
      port: 3306
  
  - name: restore dump database
    mysql_db:
      name: limesurvey
      state: import
      target: "/opt/mariadb/dumps/{{ msql_dumpfile }}"
      login_host: "{{ ansible_eth0.ipv4.address }}"
      login_user: "root"
      login_password: "{{ msql_root_passwd }}"
      encoding: "utf8mb4_unicode_ci"

  - name: erase dump file
    file:
      dest: "/opt/mariadb/dumps/{{ msql_dumpfile }}"
      state: absent

  - name: upload limesurvey files to docker host
    synchronize: 
      src: files/limesurvey
      dest: /tmp/
  
  - name: recover "upload" folder on docker host
    unarchive:
      src: files/limesurvey-uploads.tar.gz
      dest: /opt/limesurvey
      owner: root
      group: root
      mode: "u=rwx,g=rwx,o=rwx"

  - name: build limesurvey image
    docker_image:
      docker_host: "{{ dkr_host }}"
      state: present
      path: /tmp/limesurvey/
      name: scopus.com.br/limesurvey
      tag: "{{ lms_version }}"
      push: no
      pull: yes
      buildargs:
        http_proxy: "{{ lms_buildargs_http_proxy }}"
        https_proxy: "{{ lms_buildargs_http_proxy }}"
        version: "{{ lms_version }}"

  - name: create the config.php file for limesurvey
    template:
      src: lms_config.php.j2
      dest: /opt/limesurvey/conf/config.php
      mode: 0666
      backup: yes
      force: yes

  - name: Create limesurvey container and connect to network
    docker_container:
      docker_host: "{{ dkr_host }}"
      state: started
      name: limesurvey
      image: "scopus.com.br/limesurvey:{{ lms_version }}"
      ignore_image: "{{ dkr_ignore_image }}"
      hostname: limesurvey
      restart_policy: always
      user: "{{ lms_exec_user }}"
      recreate: yes
      networks:
        - name: "app_nw"
        - name: "db_nw"
      etc_hosts:
        dockerhost: "{{ app_nw.ansible_facts.docker_network.IPAM.Config[0].Gateway }}"
      ports:
        - "8081:80"
      exposed_ports:
        - "80"
      volumes:
        - "/opt/limesurvey/conf/config.php:/var/www/html/application/config/config.php:ro"
        - "/opt/limesurvey/upload:/var/www/html/upload:rw"
      labels:
        traefik.enable: "true"
        traefik.frontend.rule: "Host:survey.scopus.com.br"
        traefik.port: "80"
        traefik.protocol: "http"
        traefik.docker.network: "bridge"
      env:
        http_proxy: http://dockerhost:3128
        https_proxy: http://dockerhost:3128
        DB_TYPE: "{{ lms_dbtype }}"
        DB_HOST: "{{ lms_dbhost }}"
        DB_PORT: "{{ lms_dbport }}"
        DB_NAME: "{{ lms_dbname }}"
        DB_TABLE_PREFIX: "{{ lms_dbtableprefix }}"
        DB_USERNAME: "{{ lms_dbuser }}"
        DB_PASSWORD: "{{ lms_dbpasswd }}"
        ADMIN_USER: "{{ lms_adminuser }}"
        ADMIN_NAME: "{{ lms_adminname }}"
        ADMIN_EMAIL: "{{ lms_adminemail }}"
        ADMIN_PASSWORD: "{{ lms_adminpasswd }}"
    notify: restart limesurvey

  always: #main block
    - name: delete limesurvey files from docker host
      file:
        path: /tmp/limesurvey
        state: absent
    - name: stop cntlm
      systemd:
        name: cntlm
        state: stopped
      changed_when: false
      when: enableproxy
  
  tags: #main block
    - docker_stack